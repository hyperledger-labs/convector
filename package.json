{
  "private": true,
  "name": "convector",
  "version": "0.0.1",
  "description": "Convector Monorepo",
  "author": "WordSibu",
  "license": "Apache-2.0",
  "scripts": {
    "wait": "sleep 5",
    "user:fingerprint": "f () { node -e \"console.log(JSON.parse(require('fs').readFileSync('./examples/.convector-dev-env/.hfc-$1/$2', 'utf8')).enrollment.identity.certificate)\" | openssl x509 -fingerprint -noout | cut -d '=' -f2 ; }; f",
    "================= Life cycle =================": "==================================",
    "install": "npm-run-all -s lerna:install",
    "clean": "npm-run-all -s env:stop env:clean lerna:clean",
    "clean:docs": "rimraf docs",
    "init": "npm-run-all -s env:init 'cc:start -- 1'",
    "start": "npm-run-all -s env:start",
    "watch": "npm-scripts-watcher",
    "restart": "npm-run-all -s clean install start init",
    "restart:quick": "npm-run-all -s env:stop env:clean start init",
    "test": "npm-run-all -s lerna:test",
    "================= Lerna =================": "==================================",
    "lerna:install": "lerna bootstrap",
    "lerna:watch": "lerna run watch --parallel",
    "lerna:clean": "lerna clean --yes && lerna run clean --parallel",
    "lerna:test": "lerna run test",
    "lerna:docs": "lerna run docs:generate",
    "lerna:lint": "lerna run lint",
    "lerna:test:module": "f() { lerna exec --scope @worldsibu/$1 -- npm run test -- --inspect$2; }; f",
    "================= PUBLISH =================": "==================================",
    "publish:ci": "lerna publish --cd-version=prerelease --force-publish=* --canary --skip-git --yes",
    "prepublishOnly": "echo 'BE CAREFULL, this will publish a new official version in NPM!!!'",
    "publish": "lerna publish --force-publish=*",
    "================= DOCS =================": "==================================",
    "docs:watch": "npm-run-all -p docs:serve watch",
    "docs:start": "npm-run-all -s docs:generate docs:serve",
    "predocs:generate": "npm-run-all -s clean:docs",
    "docs:generate": "typedoc --options typedoc.json .",
    "docs:serve": "http-server",
    "docs:deploy": "gh-pages-deploy -- 'New Docs Version'",
    "================= Dev Env =================": "==================================",
    "env:init": "CONVECTOR_DIR=./examples/.convector-dev-env CONVECTOR_CONFIG=./examples/orgs ./@worldsibu/convector-tool-dev-env/scripts/init.sh",
    "env:start": "./@worldsibu/convector-tool-dev-env/scripts/start.sh",
    "env:stop": "./@worldsibu/convector-tool-dev-env/scripts/stop.sh",
    "env:restart": "CONVECTOR_DIR=./examples/.convector-dev-env CONVECTOR_CONFIG=./examples/orgs ./@worldsibu/convector-tool-dev-env/scripts/restart.sh",
    "env:clean": "CONVECTOR_DIR=./examples/.convector-dev-env ./@worldsibu/convector-tool-dev-env/scripts/clean.sh",
    "================= Chaincodes =================": "==================================",
    "cc:start": "f() { npm-run-all -s cc:package -p \"cc:install -- org1 $1\" \"cc:install -- org2 $1\" -s wait \"cc:instantiate -- $1\"; }; f",
    "cc:package": "node ./@worldsibu/convector-tool-chaincode-manager/dist/src/command.js --config ./examples/orgs/org1.chaincode.config.json --output ./chaincode package",
    "cc:install": "f() { node ./@worldsibu/convector-tool-chaincode-manager/dist/src/command.js --config ./examples/orgs/$1.chaincode.config.json install ./chaincode convector $2; }; f",
    "cc:instantiate": "node ./@worldsibu/convector-tool-chaincode-manager/dist/src/command.js --config ./examples/orgs/org1.chaincode.config.json instantiate convector",
    "cc:upgrade": "node ./@worldsibu/convector-tool-chaincode-manager/dist/src/command.js --config ./examples/orgs/org1.chaincode.config.json upgrade convector",
    "cc:invoke": "f() { node ./@worldsibu/convector-tool-chaincode-manager/dist/src/command.js --config ./examples/orgs/$1.chaincode.config.json invoke convector ${@:2}; }; f",
    "cc:upgradeInAll": "f() { npm-run-all -s cc:package \"cc:install -- org1 $1\" \"cc:install -- org2 $1\" \"cc:upgrade -- $1\"; }; f"
  },
  "watch": {
    "{@worldsibu,tutorials,gh-pages-theme}/**/*.{ts,md,css,map,hbs}": [
      "docs:generate"
    ]
  },
  "gh-pages-deploy": {
    "staticpath": "docs"
  },
  "devDependencies": {
    "@theledger/fabric-mock-stub": "^1.2.1",
    "@theledger/fabric-shim-crypto-types": "^1.0.4",
    "@theledger/fabric-shim-types": "^1.0.6",
    "@types/bytebuffer": "^5.0.37",
    "@types/chai": "^4.0.4",
    "@types/mocha": "^2.2.43",
    "@types/node": "^10.3.0",
    "@types/uuid": "^3.4.3",
    "@types/yup": "^0.24.4",
    "chai": "^4.1.2",
    "fabric-ca-client": "1.1.2",
    "fabric-client": "1.1.2",
    "gh-pages-deploy": "^0.5.1",
    "grpc": "^1.11.3",
    "http-server": "^0.11.1",
    "lerna": "^2.11.0",
    "npm-run-all": "^4.1.3",
    "npm-scripts-watcher": "^1.0.2",
    "rimraf": "^2.6.2",
    "ts-node": "^6.0.3",
    "tslint": "^5.9.1",
    "typedoc": "^0.11.1",
    "typedoc-plugin-external-module-name": "^1.1.1",
    "typescript": "2.8.3",
    "uuid": "^3.2.1"
  }
}
